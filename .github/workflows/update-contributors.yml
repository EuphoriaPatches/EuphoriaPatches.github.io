# .github/workflows/update-contributors.yml
name: Update Contributors Data

on:
  schedule:
    - cron: '0 12 * * *'  # Run daily at 12:00 PM UTC
  workflow_dispatch:     # Allow manual trigger
  push:
    paths:
      - '.github/workflows/update-contributors.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  update-contributors:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Create assets directories
        run: mkdir -p assets/data
          
      - name: Initialize JSON file if needed
        run: |
          if [ ! -f assets/data/contributors.json ]; then
            echo '{"generated":"'"$(date -u +"%Y-%m-%dT%H:%M:%SZ")"'","source":"initial","contributors":[]}' > assets/data/contributors.json
          fi
          
      - name: Trigger initial stats calculation
        run: |
          echo "Triggering initial stats calculation..."
          curl -s https://api.github.com/repos/EuphoriaPatches/propertiesFiles/stats/contributors || true
          
      - name: Attempt to fetch Stats API data
        id: stats-api
        run: |
          # Set up retry mechanism with exponential backoff
          STATS_API_SUCCESS=false
          
          # Try multiple times with increasing delays
          for attempt in {1..10}; do
            echo "Stats API attempt $attempt of 10..."
            
            # Exponential backoff: 15s, 30s, 60s, 120s, 240s
            sleep_time=$((15 * (2 ** (attempt - 1))))
            echo "Waiting $sleep_time seconds..."
            sleep $sleep_time
            
            # Try the Stats API with more verbose output
            echo "Fetching from Stats API..."
            STATUS_CODE=$(curl -s -o stats_response.json -w "%{http_code}" https://api.github.com/repos/EuphoriaPatches/propertiesFiles/stats/contributors)
            
            echo "API response status code: $STATUS_CODE"
            echo "File size: $(wc -c < stats_response.json) bytes"
            echo "First 100 characters of response:"
            head -c 100 stats_response.json
            
            # Check if file is empty
            if [ ! -s stats_response.json ]; then
              echo "Warning: stats_response.json is empty!"
              continue
            fi
            
            # Try to validate JSON without piping (which causes the broken pipe)
            if [ "$STATUS_CODE" = "200" ]; then
              node -e "
                try {
                  const fs = require('fs');
                  const data = JSON.parse(fs.readFileSync('stats_response.json', 'utf8'));
                  if (Array.isArray(data) && data.length > 0) {
                    console.log('Valid array data with ' + data.length + ' items');
                    process.exit(0);
                  } else {
                    console.log('Not a valid array or empty array');
                    process.exit(1);
                  }
                } catch(e) {
                  console.error('Error parsing JSON:', e.message);
                  process.exit(1);
                }
              "
              
              if [ $? -eq 0 ]; then
                STATS_API_SUCCESS=true
                echo "Stats API returned valid data on attempt $attempt!"
                break
              else
                echo "Stats API returned invalid data format on attempt $attempt"
              fi
            else
              echo "Stats API returned status code: $STATUS_CODE on attempt $attempt"
            fi
          done
          
          # Set output variable to indicate success or failure
          echo "success=$STATS_API_SUCCESS" >> $GITHUB_OUTPUT
          
      - name: Process Stats API data
        if: steps.stats-api.outputs.success == 'true'
        id: stats-process
        run: |
          echo "Processing Stats API data..."
          node -e '
            try {
              const fs = require("fs");
              
              // Read the existing file if it exists
              let hasChanges = true;
              let existingData = { contributors: [] };
              if (fs.existsSync("assets/data/contributors.json")) {
                existingData = JSON.parse(fs.readFileSync("assets/data/contributors.json", "utf8"));
              }
              
              const data = JSON.parse(fs.readFileSync("stats_response.json", "utf8"));
              
              // Filter out actions-user
              const filteredData = data.filter(
                contributor => contributor.author && contributor.author.login !== "actions-user"
              );
              
              // Sort by commit count
              filteredData.sort((a, b) => {
                return b.total - a.total;
              });
              
              // Simplify the data structure
              const processedData = filteredData.map(contributor => ({
                login: contributor.author.login,
                additions: contributor.weeks.reduce((sum, week) => sum + week.a, 0),
                deletions: contributor.weeks.reduce((sum, week) => sum + week.d, 0),
                commits: contributor.total,
                avatar_url: contributor.author.avatar_url,
                html_url: contributor.author.html_url
              }));
              
              // Compare with existing data (ignoring timestamp)
              if (existingData.source === "stats_api" && 
                  JSON.stringify(existingData.contributors) === JSON.stringify(processedData)) {
                console.log("No changes to contributor data detected");
                hasChanges = false;
              } else {
                console.log("Changes detected in contributor data");
                // Add timestamp
                const result = {
                  generated: new Date().toISOString(),
                  source: "stats_api",
                  contributors: processedData
                };
                
                fs.writeFileSync("assets/data/contributors.json", JSON.stringify(result, null, 2));
                console.log("Successfully created contributors.json from Stats API");
              }
              
              // Set the output for the GitHub Action
              fs.writeFileSync(process.env.GITHUB_OUTPUT, `has_changes=${hasChanges}`);
            } catch (error) {
              console.error("Error processing Stats API data:", error);
              // Do not fail the workflow, just keep the existing file
              fs.writeFileSync(process.env.GITHUB_OUTPUT, "has_changes=false");
              process.exit(0);
            }
          '
          
      - name: Fetch Simple API data
        if: steps.stats-api.outputs.success != 'true'
        id: simple-api
        run: |
          echo "Stats API failed. Using Simple API as fallback..."
          curl -s https://api.github.com/repos/EuphoriaPatches/propertiesFiles/contributors > simple_response.json
          
          # Check if Simple API returned valid data
          SIMPLE_API_SUCCESS=false
          if [ "$(cat simple_response.json | node -e "try { const data = JSON.parse(process.stdin.read()); console.log(Array.isArray(data) && data.length > 0 ? 'true' : 'false'); } catch(e) { console.log('false'); }")" = "true" ]; then
            echo "Simple API returned valid data"
            SIMPLE_API_SUCCESS=true
          else
            echo "Simple API failed to return valid data"
          fi
          
          # Set output variable
          echo "success=$SIMPLE_API_SUCCESS" >> $GITHUB_OUTPUT
      
      - name: Process Simple API data
        if: steps.stats-api.outputs.success != 'true' && steps.simple-api.outputs.success == 'true'
        id: simple-process
        run: |
          node -e '
            try {
              const fs = require("fs");
              
              // Read the existing file if it exists
              let hasChanges = true;
              let existingData = { contributors: [] };
              if (fs.existsSync("assets/data/contributors.json")) {
                existingData = JSON.parse(fs.readFileSync("assets/data/contributors.json", "utf8"));
              }
              
              const data = JSON.parse(fs.readFileSync("simple_response.json", "utf8"));
              
              // Filter out actions-user
              const filteredData = data.filter(contributor => contributor.login !== "actions-user");
              
              // Sort by contributions
              filteredData.sort((a, b) => b.contributions - a.contributions);
              
              // Simplify the data structure
              const processedData = filteredData.map(contributor => ({
                login: contributor.login,
                contributions: contributor.contributions,
                avatar_url: contributor.avatar_url,
                html_url: contributor.html_url
              }));
              
              // Compare with existing data (ignoring timestamp)
              if (existingData.source === "simple_api" && 
                  JSON.stringify(existingData.contributors) === JSON.stringify(processedData)) {
                console.log("No changes to contributor data detected");
                hasChanges = false;
              } else {
                console.log("Changes detected in contributor data");
                // Add timestamp
                const result = {
                  generated: new Date().toISOString(),
                  source: "simple_api",
                  contributors: processedData
                };
                
                fs.writeFileSync("assets/data/contributors.json", JSON.stringify(result, null, 2));
                console.log("Successfully created contributors.json from Simple API");
              }
              
              // Set the output for the GitHub Action
              fs.writeFileSync(process.env.GITHUB_OUTPUT, `has_changes=${hasChanges}`);
            } catch (error) {
              console.error("Error processing Simple API data:", error);
              // Do not fail the workflow, just keep the existing file
              fs.writeFileSync(process.env.GITHUB_OUTPUT, "has_changes=false");
              process.exit(0);
            }
          '
      
      - name: Fallback notification
        if: steps.stats-api.outputs.success != 'true' && steps.simple-api.outputs.success != 'true'
        run: echo "Both APIs failed. Keeping existing contributors file."
          
      - name: Cleanup temporary files
        run: rm -f stats_response.json simple_response.json
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Commit and push with retry
        if: steps.stats-process.outputs.has_changes == 'true' || steps.simple-process.outputs.has_changes == 'true'
        run: |
          git add assets/data/contributors.json
          git commit -m "Update contributors data [skip ci]"
            
          # Try pushing with retries
          MAX_RETRIES=3
          RETRY_COUNT=0
            
          until git push || [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Push failed, retrying (Attempt $RETRY_COUNT/$MAX_RETRIES)..."
            git pull --rebase
          done